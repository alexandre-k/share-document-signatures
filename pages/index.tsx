import type { NextPage } from 'next'
import { Button } from '@nextui-org/react';
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
// import { Fido2Lib } from "fido2-lib";
import SimpleWebAuthnBrowser from '@simplewebauthn/browser';
import { startRegistration } from '@simplewebauthn/browser';
import { startAuthentication } from '@simplewebauthn/browser';

/**
 * It is strongly advised that authenticators get their own DB
 * table, ideally with a foreign key to a specific UserModel.
 *
 * "SQL" tags below are suggestions for column data types and
 * how best to store data received during registration for use
 * in subsequent authentications.
 */
type Authenticator = {
    // SQL: Encode to base64url then store as `TEXT`. Index this column
    credentialID: Buffer;
    // SQL: Store raw bytes as `BYTEA`/`BLOB`/etc...
    credentialPublicKey: Buffer;
    // SQL: Consider `BIGINT` since some authenticators return atomic timestamps as counters
    counter: number;
    // SQL: `VARCHAR(255)` and store string array as a CSV string
    // ['usb' | 'ble' | 'nfc' | 'internal']
    transports?: AuthenticatorTransport[];
};

export const getServerSideProps = async () => {
    // const res = await fetch("http://localhost:3000/api/signatureRequest");

    // (Pseudocode) Retrieve any of the user's previously-
    // registered authenticators
    // const userAuthenticators: Authenticator[] = getUserAuthenticators(user);

    // const data = await res.json();
    const data = [{
        filesUrl: [""],
        signingUrl: "",
        detailsUrl: ""
    }]
    return { props: { data }}
}

type Signature = {
    filesUrl: string;
    signingUrl: string;
    detailsUrl: string;
}
interface HomeProps {
    data: Array<Signature>
}

const Home: NextPage = (homeProps: HomeProps) => {
    console.log(homeProps)
    const tryFido = async () => {

        try {
            const response = await fetch('http://localhost:3000/api/auth/get-registration-options')
            const { value: optionsBytes } = await response.body.getReader().read()
            const decoder = new TextDecoder();
            const options = JSON.parse(decoder.decode(optionsBytes))

            // Pass the options to the authenticator and wait for a response
            const resp = await startRegistration(options);
            // @simplewebauthn/server -> verifyRegistrationResponse()
            const verificationResp = await fetch('http://localhost:3000/api/auth/verify-registration', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(resp),
            });
            const { value: verificationBytes } = await verificationResp.body.getReader().read();
            const stringifiedVerif = Buffer.from(verificationBytes).toString('utf-8');
            console.log('verification ', JSON.parse(stringifiedVerif))
            localStorage['verification'] = stringifiedVerif;
        } catch (error) {
            // Some basic error handling
            if (error.name === 'InvalidStateError') {
                // elemError.innerText = 'Error: Authenticator was probably already registered by user';
            } else {
                // elemError.innerText = error;
            }

            console.log(error)
            // throw error;
        }
    }

  return (
      <>
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <div className={styles.grid}>
            <div>
                <h2>Signature</h2>
                <a href={homeProps.data[0].filesUrl}>
                    {homeProps.data[0].filesUrl}
                </a>
            </div>
        </div>

        <div className={styles.grid}>
            <div>
                <h2>Register</h2>
                <Button onPress={() => tryFido()}>register</Button>
            </div>
        </div>

        <div className={styles.grid}>
            <div>
                <h2>Login</h2>
                <Button onPress={() => {
                    const stringifiedVerif = localStorage['verification'];
                    console.log(JSON.parse(stringifiedVerif))
                }}>Login</Button>
            </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
      </>
  )
}

export default Home
